require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Balance::CheckInOrdersController do
  
  before do
    @user = FactoryGirl.create(:user)
    @user.create_balance_account(FactoryGirl.attributes_for(:balance_account))
    @user.reload
    #puts @user.balance_account.inspect
    request.env['warden'].stub :authenticate! => @user
    controller.stub :current_user => @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Balance::CheckInOrder. As you add validations to Balance::CheckInOrder, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    FactoryGirl.attributes_for(:balance_check_in_order)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Balance::CheckInOrdersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  #describe "GET index" do
  #  it "assigns all balance_check_in_orders as @balance_check_in_orders" do
  #    check_in_order = Balance::CheckInOrder.create! valid_attributes
  #    get :index, {}, valid_session
  #    assigns(:balance_check_in_orders).should eq([check_in_order])
  #  end
  #end

  #describe "GET show" do
  #  it "assigns the requested check_in_order as @check_in_order" do
  #    check_in_order = Balance::CheckInOrder.create! valid_attributes
  #    get :show, {:id => check_in_order.to_param}, valid_session
  #    assigns(:check_in_order).should eq(check_in_order)
  #  end
  #end

  describe "GET new" do
    it "assigns a new check_in_order as @check_in_order" do
      get :new, {:user_id => @user}, valid_session
      assigns(:balance_check_in_order).should be_a_new(Balance::CheckInOrder)
    end
  end

  #describe "GET edit" do
  #  it "assigns the requested check_in_order as @check_in_order" do
  #    check_in_order = Balance::CheckInOrder.create! valid_attributes
  #    get :edit, {:id => check_in_order.to_param}, valid_session
  #    assigns(:check_in_order).should eq(check_in_order)
  #  end
  #end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Balance::CheckInOrder"  do
        
        x = FactoryGirl.build(:balance_check_in_order, :balance_account_id => @user.balance_account.id)
        expect {
          post :create, {:user_id => @user, :balance_check_in_order => FactoryGirl.attributes_for(:balance_check_in_order)}, valid_session
        }.to change(Balance::CheckInOrder, :count).by(1)
      end

      it "assigns a newly created check_in_order as @balance_check_in_order" do
        post :create, {:user_id => @user, :balance_check_in_order => valid_attributes}, valid_session
        assigns(:balance_check_in_order).should be_a(Balance::CheckInOrder)
        assigns(:balance_check_in_order).should be_persisted
      end

      it "renders the paypal form" do
        post :create, {:user_id => @user, :balance_check_in_order => valid_attributes}, valid_session
        #response.should redirect_to(Balance::CheckInOrder.last)
        response.should render_template("paypal")
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved check_in_order as @check_in_order" do
        # Trigger the behavior that occurs when invalid params are submitted
        Balance::CheckInOrder.any_instance.stub(:save).and_return(false)
        post :create, {:user_id => @user, :balance_check_in_order => {}}, valid_session
        assigns(:balance_check_in_order).should be_a_new(Balance::CheckInOrder)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Balance::CheckInOrder.any_instance.stub(:save).and_return(false)
        post :create, {:user_id => @user, :balance_check_in_order => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "cancel paypal form with DELETE destroy" do
    it "destroys the requested check_in_order" do
      check_in_order = @user.balance_account.check_in_orders.create(FactoryGirl.attributes_for(:balance_check_in_order))
      expect {
        delete :destroy, {:user_id => @user, :id => check_in_order.to_param}, valid_session
      }.to change(Balance::CheckInOrder, :count).by(-1)
    end

    it "redirects to the balance_check_in_orders list" do
      check_in_order = @user.balance_account.check_in_orders.create(FactoryGirl.attributes_for(:balance_check_in_order))
      delete :destroy, { :user_id => @user, :id => check_in_order.to_param}, valid_session
      response.should redirect_to(user_balance_account_url(:user_id => @user))
    end
  end

end
