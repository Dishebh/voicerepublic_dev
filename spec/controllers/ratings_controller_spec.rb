require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RatingsController do

  before  do
    @user = FactoryGirl.create(:user)
    request.env['warden'].stub :authenticate! => @user
    controller.stub :current_user => @user
    @klu = FactoryGirl.create(:published_kluuu)
    Notification::MakeRate.create!(:user => @user, :klu => @klu, :other =>  @klu.user, :content => "nice one")
  end

  # This should return the minimal set of attributes required to create a valid
  # Rating. As you add validations to Rating, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    FactoryGirl.attributes_for(:rating, :user => @user, :rateable => @klu )
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RatingsController. Be sure to keep this updated too.
  def valid_session
    {}
  end


  describe "GET new" do
    it "assigns a new rating as @rating" do
      get :new, {:klu_id => @klu}, valid_session
      assigns(:rating).should be_a_new(Rating)
    end
  end


  describe "POST create" do
    describe "with valid params" do
      it "creates a new Rating" do
        expect {
          post :create, { :klu_id => @klu, :rating => FactoryGirl.attributes_for(:rating, :user_id => @user.id) }, valid_session
        }.to change(Rating, :count).by(1)
      end

      it "assigns a newly created rating as @rating" do
        post :create, {:klu_id => @klu, :rating => FactoryGirl.attributes_for(:rating, :user_id => @user.id) }, valid_session
        assigns(:rating).should be_a(Rating)
        assigns(:rating).should be_persisted
      end

      it "redirects to the klu that was rated" do
        post :create, {:klu_id => @klu, :rating => FactoryGirl.attributes_for(:rating, :user_id => @user.id) }, valid_session
        response.should redirect_to( klu_url(:id => @klu))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved rating as @rating" do
        # Trigger the behavior that occurs when invalid params are submitted
        Rating.any_instance.stub(:save).and_return(false)
        post :create, {:klu_id =>  @klu, :rating => {}}, valid_session
        assigns(:rating).should be_a_new(Rating)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Rating.any_instance.stub(:save).and_return(false)
        post :create, {:klu_id => @klu, :rating => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

end
