require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BookmarksController do

  before do
    @user = FactoryGirl.create(:user)
    @bookmark = FactoryGirl.create(:kluuu_bookmark, :user => @user)
    @kluuu = FactoryGirl.create(:published_kluuu)
    request.env['warden'].stub :authenticate! => @user
    controller.stub :current_user => @user
  end
    
  # This should return the minimal set of attributes required to create a valid
  # Bookmark. As you add validations to Bookmark, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    FactoryGirl.attributes_for(:kluuu_bookmark)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BookmarksController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all bookmarks as @bookmarks" do
      get :index, {:user_id => @bookmark.user }, valid_session
      assigns(:bookmarks).should eq([@bookmark])
    end
  end


  describe "POST create" do
    describe "with valid params" do
      it "creates a new Bookmark" do
        expect {
          post :create, { :klu_id => @kluuu.id }, valid_session
        }.to change(Bookmark, :count).by(1)
      end

      it "assigns a newly created bookmark as @bookmark" do
        post :create, { :klu_id => @kluuu.id }, valid_session
        assigns(:bookmark).should be_a(Bookmark)
        assigns(:bookmark).should be_persisted
      end

      it "redirects to the users created bookmark - index" do
        post :create, { :klu_id => @kluuu.id }, valid_session
        response.should redirect_to( user_bookmarks_path(:user_id => @user) )
      end
    end
    
  end

  describe "DELETE destroy" do
    it "destroys the requested bookmark" do
      #bookmark = Bookmark.create! valid_attributes
      expect {
        delete :destroy, { :user_id => @bookmark.user, :id => @bookmark.id }, valid_session
      
      }.to change(Bookmark, :count).by(-1)
    end

    it "redirects to the bookmarks list" do
      _user = @bookmark.user
      #bookmark = Bookmark.create! valid_attributes
      delete :destroy, { :user_id => @bookmark.user, :id => @bookmark.to_param }, valid_session
      response.should redirect_to(user_bookmarks_path(:user_id => _user) )
    end
  end

end
