require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ConversationsController do
  
  before do
    @user = FactoryGirl.create(:user)
    @receiver = FactoryGirl.create(:user)
    #@receiver = FactoryGirl.create(:user)
    #@message = FactoryGirl.create(:message, :sender => @user, :receiver => @receiver)
    request.env['warden'].stub :authenticate! => @user
    controller.stub :current_user => @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Conversation. As you add validations to Conversation, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ConversationsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all conversations as @conversations" do
      conversation = FactoryGirl.create(:conversation, :user_1 => @user, :user_2 => @receiver)
      get :index, {:user_id => @user}, valid_session
      assigns(:conversations).should eq([conversation])
    end
  end

  describe "GET show" do
    it "assigns the requested conversation as @conversation" do
      conversation = FactoryGirl.create(:conversation, :user_1 => @user, :user_2 => @receiver)
      #conversation = Conversation.create! valid_attributes
      get :show, {:user_id => @user, :id => conversation.to_param}, valid_session
      assigns(:conversation).should eq(conversation)
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested conversation" do
      conversation = FactoryGirl.create(:conversation, :user_1 => @user, :user_2 => @receiver) #Conversation.create! valid_attributes
      expect {
        delete :destroy, {:user_id => @user, :id => conversation.to_param}, valid_session
      }.to change(Conversation, :count).by(-1)
    end

    it "redirects to the conversations list" do
      conversation = FactoryGirl.create(:conversation, :user_1 => @user, :user_2 => @receiver)
      delete :destroy, {:user_id => @user, :id => conversation.to_param}, valid_session
      response.should redirect_to(user_conversations_url(:user_id => @user))
    end
  end

end
