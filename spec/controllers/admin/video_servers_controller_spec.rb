require 'spec_helper'
require 'video_system_api'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::VideoServersController do
  render_views
  
  before do
    @server = FactoryGirl.create(:video_server)  
    %w(admin user).each { |x| Role.create(:name => x)}
    @user = FactoryGirl.create(:user)
    @user.roles << Role.find_by_name('admin')
    @user.save
    request.env['warden'].stub :authenticate! => @user
    controller.stub :current_or_guest_user => @user
  end
    
  # This should return the minimal set of attributes required to create a valid
  # VideoServer. As you add validations to VideoServer, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    FactoryGirl.attributes_for(:video_server)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VideoServersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all video_servers as @video_servers" do
      
      video_server = VideoServer.create! valid_attributes
      get 'index'#, admin_video_servers_path, valid_session
      #get :index, {:admin}, valid_session
      assigns(:video_servers).should eq(VideoServer.all)
      response.should render_template("index")
    end
  end

  describe "GET show"  do
    it "assigns the requested video_server as @video_server" do
      video_server = VideoServer.create! valid_attributes
      get :show, {:id => video_server.to_param}, valid_session
      assigns(:video_server).should eq(video_server)
      response.should render_template("show")
    end
    it "gets all rooms and their states on @video_server" do
      video_server = VideoServer.create! valid_attributes
      
      room1 = FactoryGirl.create(:video_room, name: 'room1', video_system_room_id: 'Demo Meeting', video_server_id: video_server.id)
      room2 = FactoryGirl.create(:video_room, name: 'room2', video_system_room_id: 'Ended Meeting', video_server_id: video_server.id)
      
      hash1 = { :meetingID => "Demo Meeting", :attendeePW => "ap", :moderatorPW => "mp", :hasBeenForciblyEnded => false, :running => true }
      hash2 = { :meetingID => "Ended Meeting", :attendeePW => "pass", :moderatorPW => "pass", :hasBeenForciblyEnded => true, :running => false }
      flattened_response = { :returncode => true, :meetings => [ hash1, hash2 ], :messageKey => "mkey", :message => "m" }
      
      video_system_api = double(VideoSystemApi::VideoSystemApi)
      video_system_api.stub(:get_meetings).and_return(flattened_response)
      
      video_server.stub(:api).and_return(video_system_api)
      #video_server.stub(:video_system_rooms).and_return([room1, room2])
      
      video_server.should_receive(:fetch_video_system_rooms)
      video_server.should_receive(:video_system_rooms).at_least(:once).and_return([room1, room2])

      room1.should_receive(:fetch_video_system_room_info)
      room2.should_receive(:fetch_video_system_room_info)
      
      video_server.fetch_video_system_rooms
      video_server.video_system_rooms.each do |video_system_room|
        video_system_room.fetch_video_system_room_info
      end
    end
  end

  describe "GET new" do
    it "assigns a new video_server as @video_server" do
      get :new, {}, valid_session
      assigns(:video_server).should be_a_new(VideoServer)
      response.should render_template('new')
    end
  end

  describe "GET edit" do
    it "assigns the requested video_server as @video_server" do
      video_server = VideoServer.create! valid_attributes
      get :edit, {:id => video_server.to_param}, valid_session
      assigns(:video_server).should eq(video_server)
      response.should render_template('edit')
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new VideoServer" do
        expect {
          post :create, {:video_server => valid_attributes}, valid_session
        }.to change(VideoServer, :count).by(1)
      end

      it "assigns a newly created video_server as @video_server" do
        post :create, {:video_server => valid_attributes}, valid_session
        assigns(:video_server).should be_a(VideoServer)
        assigns(:video_server).should be_persisted
      end

      it "redirects to the created video_server"  do
        post :create, {:video_server => valid_attributes}, valid_session
        response.should redirect_to(admin_video_server_url(:id => VideoServer.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved video_server as @video_server" do
        # Trigger the behavior that occurs when invalid params are submitted
        VideoServer.any_instance.stub(:save).and_return(false)
        post :create, {:video_server => {}}, valid_session
        assigns(:video_server).should be_a_new(VideoServer)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        VideoServer.any_instance.stub(:save).and_return(false)
        post :create, {:video_server => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested video_server" do
        video_server = VideoServer.create! valid_attributes
        # Assuming there are no other video_servers in the database, this
        # specifies that the VideoServer created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        VideoServer.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => video_server.to_param, :video_server => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested video_server as @video_server" do
        video_server = VideoServer.create! valid_attributes
        put :update, {:id => video_server.to_param, :video_server => valid_attributes}, valid_session
        assigns(:video_server).should eq(video_server)
      end

      it "redirects to the video_server" do
        video_server = VideoServer.create! valid_attributes
        put :update, {:id => video_server.to_param, :video_server => valid_attributes}, valid_session
        response.should redirect_to(admin_video_server_url)
      end
    end

    describe "with invalid params" do
      it "assigns the video_server as @video_server" do
        video_server = VideoServer.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        VideoServer.any_instance.stub(:save).and_return(false)
        put :update, {:id => video_server.to_param, :video_server => {}}, valid_session
        assigns(:video_server).should eq(video_server)
      end

      it "re-renders the 'edit' template" do
        video_server = VideoServer.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        VideoServer.any_instance.stub(:save).and_return(false)
        put :update, {:id => video_server.to_param, :video_server => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested video_server" do
      video_server = VideoServer.create! valid_attributes
      expect {
        delete :destroy, {:id => video_server.to_param}, valid_session
      }.to change(VideoServer, :count).by(-1)
    end

    it "redirects to the video_servers list" do
      video_server = VideoServer.create! valid_attributes
      delete :destroy, {:id => video_server.to_param}, valid_session
      response.should redirect_to(admin_video_servers_url)
    end
  end

end