require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe KluImagesController do
  
  # This should return the minimal set of attributes required to create a valid
  # KluImage. As you add validations to KluImage, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    FactoryGirl.attributes_for(:klu_image)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # KluImagesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  #describe "GET index" do
  #  it "assigns all klu_images as @klu_images" do
  #    klu_image = KluImage.create! valid_attributes
  #    get :index, {}, valid_session
  #    assigns(:klu_images).should eq([klu_image])
  #  end
  #end

  describe "GET show" do
    it "assigns the requested klu_image as @klu_image" do
      #klu_image = KluImage.create! valid_attributes
      ki = FactoryGirl.create(:klu_image)
      user = ki.kluuu.user 
      klu = ki.kluuu
      get :show, { :user_id => user, :klu_id => klu, :id => ki }, valid_session
      assigns(:klu_image).should eq(ki)
    end
  end
  
  

  describe "GET new" do
    it "assigns a new klu_image as @klu_image" do
      klu = FactoryGirl.create(:published_kluuu)
      get :new, {:user_id => klu.user, :klu_id => klu }, valid_session
      assigns(:klu_image).should be_a_new(KluImage)
    end
  end

  describe "GET edit" do
    it "assigns the requested klu_image as @klu_image" do
      klu_image = FactoryGirl.create(:klu_image)
      klu = klu_image.kluuu
      user = klu.user
      get :edit, {:user_id => user, :klu_id => klu, :id => klu_image.to_param}, valid_session
      assigns(:klu_image).should eq(klu_image)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new KluImage" do
        klu = FactoryGirl.create(:published_kluuu)
        expect {
          post :create, {:user_id => klu.user, :klu_id => klu, :klu_image => valid_attributes}, valid_session
        }.to change(KluImage, :count).by(1)
      end

      it "assigns a newly created klu_image as @klu_image" do
        klu = FactoryGirl.create(:published_kluuu)
        post :create, {:user_id => klu.user, :klu_id => klu, :klu_image => valid_attributes.merge(:klu_id => klu.id)}, valid_session
        assigns(:klu_image).should be_a(KluImage)
        assigns(:klu_image).should be_persisted
      end
    
      
      it "redirects to the created klu_images KluuU"  do
        klu = FactoryGirl.create(:published_kluuu)
        post :create, {:user_id => klu.user, :klu_id => klu, :klu_image => valid_attributes }, valid_session
        response.should redirect_to( user_klu_path(:user_id => klu.user, :id => klu) )
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved klu_image as @klu_image" do
        # Trigger the behavior that occurs when invalid params are submitted
        klu = FactoryGirl.create(:published_kluuu)
        KluImage.any_instance.stub(:save).and_return(false)
        post :create, {:user_id => klu.user, :klu_id => klu, :klu_image => {}}, valid_session
        assigns(:klu_image).should be_a_new(KluImage)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        klu = FactoryGirl.create(:published_kluuu)
        KluImage.any_instance.stub(:save).and_return(false)
        post :create, {:user_id => klu.user, :klu_id => klu, :klu_image => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested klu_image" do
        
        klu_image = FactoryGirl.create(:klu_image) 
        # Assuming there are no other klu_images in the database, this
        # specifies that the KluImage created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        KluImage.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:user_id => klu_image.kluuu.user, :klu_id => klu_image.kluuu, :id => klu_image.to_param, :klu_image => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested klu_image as @klu_image" do
        klu = FactoryGirl.create(:kluuu_with_image) 
        klu_image = klu.klu_images.first
        put :update, {:user_id => klu.user, :klu_id => klu, :id => klu_image.id, :klu_image => valid_attributes}, valid_session
        assigns(:klu_image).should eq(klu_image)
      end

      it "redirects to the kluuu" do
        klu_image = FactoryGirl.create(:klu_image) 
        put :update, {:user_id => klu_image.kluuu.user, :klu_id => klu_image.kluuu, :id => klu_image.to_param, :klu_image => valid_attributes }, valid_session
        response.should redirect_to(user_klu_path(:user_id => klu_image.kluuu.user, :id => klu_image.kluuu) )
      end
    end

    describe "with invalid params" do
      it "assigns the klu_image as @klu_image" do
        klu_image = FactoryGirl.create(:klu_image) 
        # Trigger the behavior that occurs when invalid params are submitted
        KluImage.any_instance.stub(:save).and_return(false)
        put :update, {:user_id => klu_image.kluuu.user, :klu_id => klu_image.kluuu, :id => klu_image.to_param, :klu_image => {}}, valid_session
        assigns(:klu_image).should eq(klu_image)
      end

      it "re-renders the 'edit' template" do
        klu_image = FactoryGirl.create(:klu_image) 
        # Trigger the behavior that occurs when invalid params are submitted
        KluImage.any_instance.stub(:save).and_return(false)
        put :update, { :user_id => klu_image.kluuu.user, :klu_id => klu_image.kluuu, :id => klu_image.to_param, :klu_image => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested klu_image" do
      _ki = FactoryGirl.create(:klu_image)
      expect {
        delete :destroy, {:user_id => _ki.kluuu.user, :klu_id => _ki.kluuu, :id => _ki.id }, valid_session
      }.to change(KluImage, :count).by(-1)
    end

    it "redirects to the kluuu if deleted klu_image" do
      _ki = FactoryGirl.create(:klu_image)
      delete :destroy, { :user_id => _ki.kluuu.user, :klu_id => _ki.kluuu, :id => _ki.id }, valid_session
      response.should redirect_to( user_klu_path(:user_id => _ki.kluuu.user, :id => _ki.kluuu) )
    end
    
  end

end

